/* tslint:disable */
/* eslint-disable */
/**
 * MathGrass
 * This is the OpenAPI specification for MathGrass
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: andreas.domanowski@tu-dresden.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Graph } from './Graph';
import {
    GraphFromJSON,
    GraphFromJSONTyped,
    GraphToJSON,
} from './Graph';
import type { TaskHint } from './TaskHint';
import {
    TaskHintFromJSON,
    TaskHintFromJSONTyped,
    TaskHintToJSON,
} from './TaskHint';
import type { TaskTemplate } from './TaskTemplate';
import {
    TaskTemplateFromJSON,
    TaskTemplateFromJSONTyped,
    TaskTemplateToJSON,
} from './TaskTemplate';

/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    id: number;
    /**
     * 
     * @type {TaskTemplate}
     * @memberof Task
     */
    template?: TaskTemplate;
    /**
     * 
     * @type {Graph}
     * @memberof Task
     */
    graph: Graph;
    /**
     * 
     * @type {Array<TaskHint>}
     * @memberof Task
     */
    hints?: Array<TaskHint> | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof Task
     */
    feedback?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    question: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    answer?: string;
}

/**
 * Check if a given object implements the Task interface.
 */
export function instanceOfTask(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "graph" in value;
    isInstance = isInstance && "question" in value;

    return isInstance;
}

export function TaskFromJSON(json: any): Task {
    return TaskFromJSONTyped(json, false);
}

export function TaskFromJSONTyped(json: any, ignoreDiscriminator: boolean): Task {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'template': !exists(json, 'template') ? undefined : TaskTemplateFromJSON(json['template']),
        'graph': GraphFromJSON(json['graph']),
        'hints': !exists(json, 'hints') ? undefined : (json['hints'] === null ? null : (json['hints'] as Array<any>).map(TaskHintFromJSON)),
        'feedback': !exists(json, 'feedback') ? undefined : json['feedback'],
        'question': json['question'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'answer': !exists(json, 'answer') ? undefined : json['answer'],
    };
}

export function TaskToJSON(value?: Task | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'template': TaskTemplateToJSON(value.template),
        'graph': GraphToJSON(value.graph),
        'hints': value.hints === undefined ? undefined : (value.hints === null ? null : (value.hints as Array<any>).map(TaskHintToJSON)),
        'feedback': value.feedback,
        'question': value.question,
        'label': value.label,
        'answer': value.answer,
    };
}

