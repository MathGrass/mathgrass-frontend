/* tslint:disable */
/* eslint-disable */
/**
 * MathGrass
 * This is the OpenAPI specification for MathGrass
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: andreas.domanowski@tu-dresden.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Edge } from './Edge';
import {
    EdgeFromJSON,
    EdgeFromJSONTyped,
    EdgeToJSON,
} from './Edge';
import type { Label } from './Label';
import {
    LabelFromJSON,
    LabelFromJSONTyped,
    LabelToJSON,
} from './Label';
import type { Vertex } from './Vertex';
import {
    VertexFromJSON,
    VertexFromJSONTyped,
    VertexToJSON,
} from './Vertex';

/**
 * 
 * @export
 * @interface Graph
 */
export interface Graph {
    /**
     * 
     * @type {number}
     * @memberof Graph
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Graph
     */
    label?: string;
    /**
     * 
     * @type {Array<Label>}
     * @memberof Graph
     */
    labels?: Array<Label>;
    /**
     * 
     * @type {Array<Edge>}
     * @memberof Graph
     */
    edges?: Array<Edge>;
    /**
     * 
     * @type {Array<Vertex>}
     * @memberof Graph
     */
    vertices?: Array<Vertex>;
}

/**
 * Check if a given object implements the Graph interface.
 */
export function instanceOfGraph(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function GraphFromJSON(json: any): Graph {
    return GraphFromJSONTyped(json, false);
}

export function GraphFromJSONTyped(json: any, ignoreDiscriminator: boolean): Graph {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'labels': !exists(json, 'labels') ? undefined : ((json['labels'] as Array<any>).map(LabelFromJSON)),
        'edges': !exists(json, 'edges') ? undefined : ((json['edges'] as Array<any>).map(EdgeFromJSON)),
        'vertices': !exists(json, 'vertices') ? undefined : ((json['vertices'] as Array<any>).map(VertexFromJSON)),
    };
}

export function GraphToJSON(value?: Graph | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'label': value.label,
        'labels': value.labels === undefined ? undefined : ((value.labels as Array<any>).map(LabelToJSON)),
        'edges': value.edges === undefined ? undefined : ((value.edges as Array<any>).map(EdgeToJSON)),
        'vertices': value.vertices === undefined ? undefined : ((value.vertices as Array<any>).map(VertexToJSON)),
    };
}

