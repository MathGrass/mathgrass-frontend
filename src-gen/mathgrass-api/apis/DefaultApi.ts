/* tslint:disable */
/* eslint-disable */
/**
 * MathGrass
 * This is the OpenAPI specification for MathGrass
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: andreas.domanowski@tu-dresden.de
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Feedback,
  Graph,
  Label,
  Task,
  TaskCollection,
  TaskHint,
  TaskIdLabelTuple,
  TaskResult,
  TaskSolver,
  TaskTemplate,
  TaskTopic,
} from '../models';
import {
    FeedbackFromJSON,
    FeedbackToJSON,
    GraphFromJSON,
    GraphToJSON,
    LabelFromJSON,
    LabelToJSON,
    TaskFromJSON,
    TaskToJSON,
    TaskCollectionFromJSON,
    TaskCollectionToJSON,
    TaskHintFromJSON,
    TaskHintToJSON,
    TaskIdLabelTupleFromJSON,
    TaskIdLabelTupleToJSON,
    TaskResultFromJSON,
    TaskResultToJSON,
    TaskSolverFromJSON,
    TaskSolverToJSON,
    TaskTemplateFromJSON,
    TaskTemplateToJSON,
    TaskTopicFromJSON,
    TaskTopicToJSON,
} from '../models';

export interface AddTaskFeedbackRequest {
    taskId: number;
    feedback: Feedback;
}

export interface AddTaskHintRequest {
    taskId: number;
    hint: TaskHint;
}

export interface CreateGraphRequest {
    graph: Graph;
}

export interface CreateLabelRequest {
    label: Label;
}

export interface CreateTaskRequest {
    task: Task;
}

export interface CreateTaskCollectionRequest {
    taskCollection: TaskCollection;
}

export interface CreateTaskSolverRequest {
    taskSolver: TaskSolver;
}

export interface CreateTaskTemplateRequest {
    taskTemplate: TaskTemplate;
}

export interface CreateTaskTopicRequest {
    taskTopic: TaskTopic;
}

export interface GetGraphByIdRequest {
    graphId: number;
}

export interface GetHintForTaskRequest {
    taskId: number;
    hintLevel: number;
}

export interface GetLabelByIdRequest {
    labelId: number;
}

export interface GetTaskByIdRequest {
    taskId: number;
}

export interface GetTaskCollectionByIdRequest {
    taskCollectionId: number;
}

export interface GetTaskFeedbackRequest {
    taskId: number;
}

export interface GetTaskResultRequest {
    resultId: number;
}

export interface GetTaskSolverByIdRequest {
    taskSolverId: number;
}

export interface GetTaskTemplateByIdRequest {
    taskTemplateId: number;
}

export interface GetTaskTemplateHintRequest {
    taskTemplateId: number;
    index: number;
}

export interface RunTaskRequest {
    taskId: number;
    answer: string;
}

export interface SetTaskTemplateLabelRequest {
    taskTemplateId: number;
    label: string;
}

export interface SetTaskTemplateQuestionRequest {
    taskTemplateId: number;
    question: string;
}

export interface UpdateGraphRequest {
    graphId: number;
    graph: Graph;
}

export interface UpdateTaskRequest {
    taskId: number;
    task: Task;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Adds feedback to a task
     */
    async addTaskFeedbackRaw(requestParameters: AddTaskFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling addTaskFeedback.');
        }

        if (requestParameters.feedback === null || requestParameters.feedback === undefined) {
            throw new runtime.RequiredError('feedback','Required parameter requestParameters.feedback was null or undefined when calling addTaskFeedback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task/{taskId}/addFeedback`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedbackToJSON(requestParameters.feedback),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds feedback to a task
     */
    async addTaskFeedback(requestParameters: AddTaskFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addTaskFeedbackRaw(requestParameters, initOverrides);
    }

    /**
     * Adds a hint to a task
     */
    async addTaskHintRaw(requestParameters: AddTaskHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling addTaskHint.');
        }

        if (requestParameters.hint === null || requestParameters.hint === undefined) {
            throw new runtime.RequiredError('hint','Required parameter requestParameters.hint was null or undefined when calling addTaskHint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task/{taskId}/addHint`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskHintToJSON(requestParameters.hint),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Adds a hint to a task
     */
    async addTaskHint(requestParameters: AddTaskHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.addTaskHintRaw(requestParameters, initOverrides);
    }

    /**
     * Create a new graph
     */
    async createGraphRaw(requestParameters: CreateGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.graph === null || requestParameters.graph === undefined) {
            throw new runtime.RequiredError('graph','Required parameter requestParameters.graph was null or undefined when calling createGraph.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/graph`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: GraphToJSON(requestParameters.graph),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Create a new graph
     */
    async createGraph(requestParameters: CreateGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createGraphRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a label
     */
    async createLabelRaw(requestParameters: CreateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling createLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/label`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LabelToJSON(requestParameters.label),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * Creates a label
     */
    async createLabel(requestParameters: CreateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.createLabelRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task
     */
    async createTaskRaw(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.task === null || requestParameters.task === undefined) {
            throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling createTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a task
     */
    async createTask(requestParameters: CreateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task collection
     */
    async createTaskCollectionRaw(requestParameters: CreateTaskCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCollection>> {
        if (requestParameters.taskCollection === null || requestParameters.taskCollection === undefined) {
            throw new runtime.RequiredError('taskCollection','Required parameter requestParameters.taskCollection was null or undefined when calling createTaskCollection.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/taskCollection`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskCollectionToJSON(requestParameters.taskCollection),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCollectionFromJSON(jsonValue));
    }

    /**
     * Creates a task collection
     */
    async createTaskCollection(requestParameters: CreateTaskCollectionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCollection> {
        const response = await this.createTaskCollectionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task solver
     */
    async createTaskSolverRaw(requestParameters: CreateTaskSolverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.taskSolver === null || requestParameters.taskSolver === undefined) {
            throw new runtime.RequiredError('taskSolver','Required parameter requestParameters.taskSolver was null or undefined when calling createTaskSolver.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/taskSolver`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskSolverToJSON(requestParameters.taskSolver),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a task solver
     */
    async createTaskSolver(requestParameters: CreateTaskSolverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createTaskSolverRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task template
     */
    async createTaskTemplateRaw(requestParameters: CreateTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.taskTemplate === null || requestParameters.taskTemplate === undefined) {
            throw new runtime.RequiredError('taskTemplate','Required parameter requestParameters.taskTemplate was null or undefined when calling createTaskTemplate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/taskTemplate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskTemplateToJSON(requestParameters.taskTemplate),
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Creates a task template
     */
    async createTaskTemplate(requestParameters: CreateTaskTemplateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.createTaskTemplateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Creates a task topic
     */
    async createTaskTopicRaw(requestParameters: CreateTaskTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskTopic>> {
        if (requestParameters.taskTopic === null || requestParameters.taskTopic === undefined) {
            throw new runtime.RequiredError('taskTopic','Required parameter requestParameters.taskTopic was null or undefined when calling createTaskTopic.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/taskTopic`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskTopicToJSON(requestParameters.taskTopic),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskTopicFromJSON(jsonValue));
    }

    /**
     * Creates a task topic
     */
    async createTaskTopic(requestParameters: CreateTaskTopicRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskTopic> {
        const response = await this.createTaskTopicRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a graph by id
     */
    async getGraphByIdRaw(requestParameters: GetGraphByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Graph>> {
        if (requestParameters.graphId === null || requestParameters.graphId === undefined) {
            throw new runtime.RequiredError('graphId','Required parameter requestParameters.graphId was null or undefined when calling getGraphById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/graph/{graphId}`.replace(`{${"graphId"}}`, encodeURIComponent(String(requestParameters.graphId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GraphFromJSON(jsonValue));
    }

    /**
     * Get a graph by id
     */
    async getGraphById(requestParameters: GetGraphByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Graph> {
        const response = await this.getGraphByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get hint at hintlevel for task
     */
    async getHintForTaskRaw(requestParameters: GetHintForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskHint>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getHintForTask.');
        }

        if (requestParameters.hintLevel === null || requestParameters.hintLevel === undefined) {
            throw new runtime.RequiredError('hintLevel','Required parameter requestParameters.hintLevel was null or undefined when calling getHintForTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{taskId}/hint/{hintLevel}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))).replace(`{${"hintLevel"}}`, encodeURIComponent(String(requestParameters.hintLevel))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskHintFromJSON(jsonValue));
    }

    /**
     * Get hint at hintlevel for task
     */
    async getHintForTask(requestParameters: GetHintForTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskHint> {
        const response = await this.getHintForTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the IDs of all tasks
     */
    async getIdsOfAllTasksRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskIdLabelTuple>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskIdLabelTupleFromJSON));
    }

    /**
     * Get the IDs of all tasks
     */
    async getIdsOfAllTasks(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskIdLabelTuple>> {
        const response = await this.getIdsOfAllTasksRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a label
     */
    async getLabelByIdRaw(requestParameters: GetLabelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Label>> {
        if (requestParameters.labelId === null || requestParameters.labelId === undefined) {
            throw new runtime.RequiredError('labelId','Required parameter requestParameters.labelId was null or undefined when calling getLabelById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/label/{labelId}`.replace(`{${"labelId"}}`, encodeURIComponent(String(requestParameters.labelId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LabelFromJSON(jsonValue));
    }

    /**
     * Returns a label
     */
    async getLabelById(requestParameters: GetLabelByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Label> {
        const response = await this.getLabelByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all labels
     */
    async getLabelsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Label>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/label`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LabelFromJSON));
    }

    /**
     * Get all labels
     */
    async getLabels(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Label>> {
        const response = await this.getLabelsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Returns a task
     */
    async getTaskByIdRaw(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTaskById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * Returns a task
     */
    async getTaskById(requestParameters: GetTaskByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.getTaskByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a task collection
     */
    async getTaskCollectionByIdRaw(requestParameters: GetTaskCollectionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskCollection>> {
        if (requestParameters.taskCollectionId === null || requestParameters.taskCollectionId === undefined) {
            throw new runtime.RequiredError('taskCollectionId','Required parameter requestParameters.taskCollectionId was null or undefined when calling getTaskCollectionById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taskCollection/{taskCollectionId}`.replace(`{${"taskCollectionId"}}`, encodeURIComponent(String(requestParameters.taskCollectionId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskCollectionFromJSON(jsonValue));
    }

    /**
     * Returns a task collection
     */
    async getTaskCollectionById(requestParameters: GetTaskCollectionByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskCollection> {
        const response = await this.getTaskCollectionByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all task collection
     */
    async getTaskCollectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskCollection>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taskCollection`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskCollectionFromJSON));
    }

    /**
     * Get all task collection
     */
    async getTaskCollections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskCollection>> {
        const response = await this.getTaskCollectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get all feedback of a task
     */
    async getTaskFeedbackRaw(requestParameters: GetTaskFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Feedback>>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling getTaskFeedback.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/task/{taskId}/getFeedback`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FeedbackFromJSON));
    }

    /**
     * Get all feedback of a task
     */
    async getTaskFeedback(requestParameters: GetTaskFeedbackRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Feedback>> {
        const response = await this.getTaskFeedbackRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get the result for an evaluation process
     */
    async getTaskResultRaw(requestParameters: GetTaskResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskResult>> {
        if (requestParameters.resultId === null || requestParameters.resultId === undefined) {
            throw new runtime.RequiredError('resultId','Required parameter requestParameters.resultId was null or undefined when calling getTaskResult.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/evaluator/taskResult/{resultId}`.replace(`{${"resultId"}}`, encodeURIComponent(String(requestParameters.resultId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskResultFromJSON(jsonValue));
    }

    /**
     * Get the result for an evaluation process
     */
    async getTaskResult(requestParameters: GetTaskResultRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskResult> {
        const response = await this.getTaskResultRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a task solver
     */
    async getTaskSolverByIdRaw(requestParameters: GetTaskSolverByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskSolver>> {
        if (requestParameters.taskSolverId === null || requestParameters.taskSolverId === undefined) {
            throw new runtime.RequiredError('taskSolverId','Required parameter requestParameters.taskSolverId was null or undefined when calling getTaskSolverById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taskSolver/{taskSolverId}`.replace(`{${"taskSolverId"}}`, encodeURIComponent(String(requestParameters.taskSolverId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskSolverFromJSON(jsonValue));
    }

    /**
     * Returns a task solver
     */
    async getTaskSolverById(requestParameters: GetTaskSolverByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskSolver> {
        const response = await this.getTaskSolverByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a task template
     */
    async getTaskTemplateByIdRaw(requestParameters: GetTaskTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskTemplate>> {
        if (requestParameters.taskTemplateId === null || requestParameters.taskTemplateId === undefined) {
            throw new runtime.RequiredError('taskTemplateId','Required parameter requestParameters.taskTemplateId was null or undefined when calling getTaskTemplateById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taskTemplate/{taskTemplateId}`.replace(`{${"taskTemplateId"}}`, encodeURIComponent(String(requestParameters.taskTemplateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskTemplateFromJSON(jsonValue));
    }

    /**
     * Returns a task template
     */
    async getTaskTemplateById(requestParameters: GetTaskTemplateByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskTemplate> {
        const response = await this.getTaskTemplateByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns a hint
     */
    async getTaskTemplateHintRaw(requestParameters: GetTaskTemplateHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TaskHint>> {
        if (requestParameters.taskTemplateId === null || requestParameters.taskTemplateId === undefined) {
            throw new runtime.RequiredError('taskTemplateId','Required parameter requestParameters.taskTemplateId was null or undefined when calling getTaskTemplateHint.');
        }

        if (requestParameters.index === null || requestParameters.index === undefined) {
            throw new runtime.RequiredError('index','Required parameter requestParameters.index was null or undefined when calling getTaskTemplateHint.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taskTemplate/{taskTemplateId}/getHint/{index}`.replace(`{${"taskTemplateId"}}`, encodeURIComponent(String(requestParameters.taskTemplateId))).replace(`{${"index"}}`, encodeURIComponent(String(requestParameters.index))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskHintFromJSON(jsonValue));
    }

    /**
     * Returns a hint
     */
    async getTaskTemplateHint(requestParameters: GetTaskTemplateHintRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TaskHint> {
        const response = await this.getTaskTemplateHintRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all task topics
     */
    async getTaskTopicsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TaskTopic>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/taskTopic`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TaskTopicFromJSON));
    }

    /**
     * Get all task topics
     */
    async getTaskTopics(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TaskTopic>> {
        const response = await this.getTaskTopicsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Run a task with an answer
     */
    async runTaskRaw(requestParameters: RunTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling runTask.');
        }

        if (requestParameters.answer === null || requestParameters.answer === undefined) {
            throw new runtime.RequiredError('answer','Required parameter requestParameters.answer was null or undefined when calling runTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/evaluator/runTask/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.answer as any,
        }, initOverrides);

        return new runtime.TextApiResponse(response) as any;
    }

    /**
     * Run a task with an answer
     */
    async runTask(requestParameters: RunTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.runTaskRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Sets a label for a task template
     */
    async setTaskTemplateLabelRaw(requestParameters: SetTaskTemplateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskTemplateId === null || requestParameters.taskTemplateId === undefined) {
            throw new runtime.RequiredError('taskTemplateId','Required parameter requestParameters.taskTemplateId was null or undefined when calling setTaskTemplateLabel.');
        }

        if (requestParameters.label === null || requestParameters.label === undefined) {
            throw new runtime.RequiredError('label','Required parameter requestParameters.label was null or undefined when calling setTaskTemplateLabel.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/taskTemplate/{taskTemplateId}/setLabel`.replace(`{${"taskTemplateId"}}`, encodeURIComponent(String(requestParameters.taskTemplateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.label as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a label for a task template
     */
    async setTaskTemplateLabel(requestParameters: SetTaskTemplateLabelRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setTaskTemplateLabelRaw(requestParameters, initOverrides);
    }

    /**
     * Sets a question for a task template
     */
    async setTaskTemplateQuestionRaw(requestParameters: SetTaskTemplateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskTemplateId === null || requestParameters.taskTemplateId === undefined) {
            throw new runtime.RequiredError('taskTemplateId','Required parameter requestParameters.taskTemplateId was null or undefined when calling setTaskTemplateQuestion.');
        }

        if (requestParameters.question === null || requestParameters.question === undefined) {
            throw new runtime.RequiredError('question','Required parameter requestParameters.question was null or undefined when calling setTaskTemplateQuestion.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/taskTemplate/{taskTemplateId}/setQuestion`.replace(`{${"taskTemplateId"}}`, encodeURIComponent(String(requestParameters.taskTemplateId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.question as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Sets a question for a task template
     */
    async setTaskTemplateQuestion(requestParameters: SetTaskTemplateQuestionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.setTaskTemplateQuestionRaw(requestParameters, initOverrides);
    }

    /**
     * Update a graph
     */
    async updateGraphRaw(requestParameters: UpdateGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.graphId === null || requestParameters.graphId === undefined) {
            throw new runtime.RequiredError('graphId','Required parameter requestParameters.graphId was null or undefined when calling updateGraph.');
        }

        if (requestParameters.graph === null || requestParameters.graph === undefined) {
            throw new runtime.RequiredError('graph','Required parameter requestParameters.graph was null or undefined when calling updateGraph.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/graph/{graphId}`.replace(`{${"graphId"}}`, encodeURIComponent(String(requestParameters.graphId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: GraphToJSON(requestParameters.graph),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update a graph
     */
    async updateGraph(requestParameters: UpdateGraphRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateGraphRaw(requestParameters, initOverrides);
    }

    /**
     * Updates a task
     */
    async updateTaskRaw(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.taskId === null || requestParameters.taskId === undefined) {
            throw new runtime.RequiredError('taskId','Required parameter requestParameters.taskId was null or undefined when calling updateTask.');
        }

        if (requestParameters.task === null || requestParameters.task === undefined) {
            throw new runtime.RequiredError('task','Required parameter requestParameters.task was null or undefined when calling updateTask.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/task/{taskId}`.replace(`{${"taskId"}}`, encodeURIComponent(String(requestParameters.taskId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TaskToJSON(requestParameters.task),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Updates a task
     */
    async updateTask(requestParameters: UpdateTaskRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateTaskRaw(requestParameters, initOverrides);
    }

}
